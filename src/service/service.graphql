type Service {
  id: ID!
  name: String!
  price: Float!
  description: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  professionalId: ID!
  professional: Professional!
  bookings: [Booking!]!
}

type Professional {
  id: ID!
  # Otros campos del profesional, si los tienes
}

type Booking {
  # Definir la estructura de un booking, si es necesario
}

input CreateServiceInput {
  name: String!
  price: Float!
  description: String!
  isActive: Boolean!
  professionalId: ID!
}

input UpdateServiceInput {
  name: String
  price: Float
  description: String
  isActive: Boolean
}

type Query {
  services: [Service!]!
  service(id: ID!): Service!
}

type Mutation {
  createService(createServiceInput: CreateServiceInput!): Service!
  updateService(id: ID!, updateServiceInput: UpdateServiceInput!): Service!
  removeService(id: ID!): Service!
}